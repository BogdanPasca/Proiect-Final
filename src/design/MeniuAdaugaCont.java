package design;

import entities.Bank;
import entities.Client;
import entities.account.AccountType;
import entities.account.AccountType;
import javax.swing.JOptionPane;

public class MeniuAdaugaCont extends javax.swing.JDialog {

    private Bank bank;
    private Client customer;

    /**
     * Creates new form AddAccountMenu
     */
    public MeniuAdaugaCont(java.awt.Frame parent, boolean modal, Bank bank) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.bank = bank;
        customer = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        prenumeLabel = new javax.swing.JLabel();
        prenumeField = new javax.swing.JTextField();
        numeLabel = new javax.swing.JLabel();
        numeField = new javax.swing.JTextField();
        cnpLabel = new javax.swing.JLabel();
        cnpField = new javax.swing.JTextField();
        depositLabel = new javax.swing.JLabel();
        depositField = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeField = new javax.swing.JComboBox();
        adaugaButton = new javax.swing.JButton();
        anulareButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adaugă cont");
        setMinimumSize(new java.awt.Dimension(350, 300));
        getContentPane().setLayout(new java.awt.GridLayout(6, 2, 5, 5));

        prenumeLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        prenumeLabel.setText("Prenume:");
        getContentPane().add(prenumeLabel);

        prenumeField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        getContentPane().add(prenumeField);

        numeLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        numeLabel.setText("Nume:");
        getContentPane().add(numeLabel);

        numeField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        getContentPane().add(numeField);

        cnpLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        cnpLabel.setText("Cnp:");
        getContentPane().add(cnpLabel);

        cnpField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        cnpField.setMinimumSize(new java.awt.Dimension(50, 90));
        cnpField.setPreferredSize(new java.awt.Dimension(31, 14));
        getContentPane().add(cnpField);

        depositLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        depositLabel.setText("Depozitul inițial:");
        getContentPane().add(depositLabel);

        depositField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        getContentPane().add(depositField);

        typeLabel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        typeLabel.setText("Tipul contului:");
        getContentPane().add(typeLabel);

        typeField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        typeField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Depozit", "Economii" }));
        typeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeFieldActionPerformed(evt);
            }
        });
        getContentPane().add(typeField);

        adaugaButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        adaugaButton.setText("ADAUGĂ");
        adaugaButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        adaugaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaugaButtonActionPerformed(evt);
            }
        });
        getContentPane().add(adaugaButton);

        anulareButton.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        anulareButton.setText("ANULARE");
        anulareButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        anulareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anulareButtonActionPerformed(evt);
            }
        });
        getContentPane().add(anulareButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void anulareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anulareButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_anulareButtonActionPerformed

    private void adaugaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaugaButtonActionPerformed
        StringBuilder warnings = new StringBuilder();
        String firstName = "", lastName = "", cnp = "", depositString = "";
        double amount = 0;
        //Verificare prenume. Am pus return pentru ca sa nu ma lase sa trec mai departe daca nu completez un camp
        if (prenumeField.getText().isEmpty()) {
            warnings.append("Câmpul prenume nu poate fi gol.\n");
        } else {
            firstName = prenumeField.getText();
        }
        //Daca prenumele este un numar - eroare
        if (prenumeField.getText().matches("-?\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(this, "Nu sunt admise numere în câmpul prenume!", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Verificare pentru numere in campul prenume
        if (!prenumeField.getText().matches("^[a-zA-z]*$")) {
            JOptionPane.showMessageDialog(this, "Sunt admise doar litere în câmpul prenume!", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Verificare nume
        if (numeField.getText().isEmpty()) {
            warnings.append("Câmpul nume nu poate fi gol.\n");
        } else {
            lastName = numeField.getText();
        }

        //Daca numele este un numar - eroare
        if (numeField.getText().matches("-?\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(this, "Nu sunt admise numere în câmpul nume!", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Verificare pentru numere in campul nume
        if (!numeField.getText().matches("^[a-zA-z]*$")) {
            JOptionPane.showMessageDialog(this, "Sunt admise doar litere în câmpul nume!", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //Verificare CNP
        if (cnpField.getText().isEmpty()) {
            warnings.append("Câmpul cnp nu poate fi gol.\n");
        }
        //if cnp it is not a number
        if (!cnpField.getText().matches("-?\\d+(\\.\\d+)?")) {
            warnings.append("Sunt admise doar numere în câmpul cnp.\n ");
        } else {
            cnp = cnpField.getText();
        }

        //Verificare depozit initial
        if (depositField.getText().isEmpty()) {
            warnings.append("Câmpul depozitul inițial nu poate fi gol.");
        } else {
            try {
                amount = Bank.round(Double.parseDouble(depositField.getText()), 2);
            } catch (NumberFormatException ex) {
                warnings.append("Sunt admise doar numere în câmpul depozitul inițial.");
            }
        }
        if (warnings.length() > 0) {
            JOptionPane.showMessageDialog(this, warnings.toString(), "Input Warnings", JOptionPane.WARNING_MESSAGE);
        } else {
            AccountType accountType = AccountType.Undefined;
            if (typeField.getSelectedItem().toString() == "Depozit") {
                if (amount >= 500) {
                    accountType = AccountType.Depozit;
                } else {
                    warnings.append("Suma minimă pentru deschiderea unui cont tip depozit este 500Lei");
                }
            } else if (typeField.getSelectedItem().toString() == "Economii") {
                if (amount >= 100) {
                    accountType = AccountType.Economii;
                } else {
                    warnings.append("Suma minimă pentru deschiderea unui cont tip economii este 100Lei");
                }
            }
            if (accountType != AccountType.Undefined) {
                customer = bank.deschideCont(firstName, lastName, cnp, accountType, amount);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, warnings.toString(), "Input Warnings", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_adaugaButtonActionPerformed

    private void typeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adaugaButton;
    private javax.swing.JButton anulareButton;
    private javax.swing.JTextField cnpField;
    private javax.swing.JLabel cnpLabel;
    private javax.swing.JTextField depositField;
    private javax.swing.JLabel depositLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField numeField;
    private javax.swing.JLabel numeLabel;
    private javax.swing.JTextField prenumeField;
    private javax.swing.JLabel prenumeLabel;
    private javax.swing.JComboBox typeField;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    public Client getCustomer() {
        return customer;
    }
}
